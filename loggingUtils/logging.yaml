version: 1
# 将信息传播到配置文件的跟日志记录器中
disable_existing_loggers: False

# 配置了日志格式化输出时的样式
formatters:
    simple:
        format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# 需要处理的日志信息(输出的位置,日志级别,日志输出样式)
handlers:
    console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: simple
        stream: ext://sys.stdout
    info_file_handler:
        class: logging.handlers.RotatingFileHandler
        level: INFO
        formatter: simple
        filename: info.log
        maxBytes: 10485760 # 10MB
        backupCount: 20
        encoding: utf8
    error_file_handler:
        class: logging.handlers.RotatingFileHandler
        level: ERROR
        formatter: simple
        filename: errors.log
        maxBytes: 10485760
        backupCount: 20
        encoding: utf8

# loggers设置了自定义的logger实例，
#  在程序中使用logging.getLogger(“名字与配置文件中的logger名字一致且是字符串形式”)函数获取配置文件中logger实例的配置信息，
#  例如打印的日志级别、子记录器的handler（
#  1：子记录器与根记录器有相同的handler时，打印输出的日志会出现两遍，
#  2：记录器的handler有多个时，而且输出的位置相同且class字段相同，也会导致输出两遍；
#  诸如此问题，将logger记录器的propagate属性设置为False，就会禁止将日志消息传递给父级记录器的处理程序中）等
loggers:
    my_module:
        level: ERROR
        handlers: [info_file_handler]
        # 打开日志记录器
        propagate: no

# root设置了根记录器的配置信息，例如打印的日志级别、记录器的handler（多个handler时用列表存储）等
root:
    level: INFO
    handlers: [console,info_file_handler,error_file_handler]